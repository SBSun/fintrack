/*
 * This file is generated by jOOQ.
 */
package sun.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sun.Sun;
import sun.tables.records.PaymentRecord;


/**
 * 결제 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sun.payment</code>
     */
    public static final Payment PAYMENT = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>sun.payment.pm_seq</code>. 결제 일련번호
     */
    public final TableField<PaymentRecord, Long> PM_SEQ = createField(DSL.name("pm_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "결제 일련번호");

    /**
     * The column <code>sun.payment.pm_ctt</code>. 결제 내용
     */
    public final TableField<PaymentRecord, String> PM_CTT = createField(DSL.name("pm_ctt"), SQLDataType.VARCHAR(255).nullable(false), this, "결제 내용");

    /**
     * The column <code>sun.payment.pm_prc</code>. 결제 금액
     */
    public final TableField<PaymentRecord, Long> PM_PRC = createField(DSL.name("pm_prc"), SQLDataType.BIGINT.nullable(false), this, "결제 금액");

    /**
     * The column <code>sun.payment.mb_seq</code>. 회원 일련변호
     */
    public final TableField<PaymentRecord, Long> MB_SEQ = createField(DSL.name("mb_seq"), SQLDataType.BIGINT.nullable(false), this, "회원 일련변호");

    /**
     * The column <code>sun.payment.cre_dt</code>. 생성일시
     */
    public final TableField<PaymentRecord, LocalDateTime> CRE_DT = createField(DSL.name("cre_dt"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "생성일시");

    /**
     * The column <code>sun.payment.pm_ctg_id</code>. 카테고리 아이디
     */
    public final TableField<PaymentRecord, Long> PM_CTG_ID = createField(DSL.name("pm_ctg_id"), SQLDataType.BIGINT.nullable(false), this, "카테고리 아이디");

    private Payment(Name alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("결제 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sun.payment</code> table reference
     */
    public Payment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>sun.payment</code> table reference
     */
    public Payment(Name alias) {
        this(alias, PAYMENT);
    }

    /**
     * Create a <code>sun.payment</code> table reference
     */
    public Payment() {
        this(DSL.name("payment"), null);
    }

    public <O extends Record> Payment(Table<O> child, ForeignKey<O, PaymentRecord> key) {
        super(child, key, PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sun.SUN;
    }

    @Override
    public Identity<PaymentRecord, Long> getIdentity() {
        return (Identity<PaymentRecord, Long>) super.getIdentity();
    }

    @Override
    public Payment as(String alias) {
        return new Payment(DSL.name(alias), this);
    }

    @Override
    public Payment as(Name alias) {
        return new Payment(alias, this);
    }

    @Override
    public Payment as(Table<?> alias) {
        return new Payment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Name name) {
        return new Payment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Table<?> name) {
        return new Payment(name.getQualifiedName(), null);
    }
}
