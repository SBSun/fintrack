/*
 * This file is generated by jOOQ.
 */
package sun.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sun.Fintrack;
import sun.Keys;
import sun.tables.records.PaymentCategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PaymentCategory extends TableImpl<PaymentCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fintrack.PAYMENT_CATEGORY</code>
     */
    public static final PaymentCategory PAYMENT_CATEGORY = new PaymentCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentCategoryRecord> getRecordType() {
        return PaymentCategoryRecord.class;
    }

    /**
     * The column <code>fintrack.PAYMENT_CATEGORY.PM_CTG_ID</code>. 결제 카테고리 아이디
     */
    public final TableField<PaymentCategoryRecord, Long> PM_CTG_ID = createField(DSL.name("PM_CTG_ID"), SQLDataType.BIGINT.nullable(false), this, "결제 카테고리 아이디");

    /**
     * The column <code>fintrack.PAYMENT_CATEGORY.PM_CTG_NM</code>. 카테고리명
     */
    public final TableField<PaymentCategoryRecord, String> PM_CTG_NM = createField(DSL.name("PM_CTG_NM"), SQLDataType.VARCHAR(50).nullable(false), this, "카테고리명");

    private PaymentCategory(Name alias, Table<PaymentCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentCategory(Name alias, Table<PaymentCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>fintrack.PAYMENT_CATEGORY</code> table reference
     */
    public PaymentCategory(String alias) {
        this(DSL.name(alias), PAYMENT_CATEGORY);
    }

    /**
     * Create an aliased <code>fintrack.PAYMENT_CATEGORY</code> table reference
     */
    public PaymentCategory(Name alias) {
        this(alias, PAYMENT_CATEGORY);
    }

    /**
     * Create a <code>fintrack.PAYMENT_CATEGORY</code> table reference
     */
    public PaymentCategory() {
        this(DSL.name("PAYMENT_CATEGORY"), null);
    }

    public <O extends Record> PaymentCategory(Table<O> child, ForeignKey<O, PaymentCategoryRecord> key) {
        super(child, key, PAYMENT_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fintrack.FINTRACK;
    }

    @Override
    public UniqueKey<PaymentCategoryRecord> getPrimaryKey() {
        return Keys.KEY_PAYMENT_CATEGORY_PRIMARY;
    }

    @Override
    public PaymentCategory as(String alias) {
        return new PaymentCategory(DSL.name(alias), this);
    }

    @Override
    public PaymentCategory as(Name alias) {
        return new PaymentCategory(alias, this);
    }

    @Override
    public PaymentCategory as(Table<?> alias) {
        return new PaymentCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentCategory rename(String name) {
        return new PaymentCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentCategory rename(Name name) {
        return new PaymentCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentCategory rename(Table<?> name) {
        return new PaymentCategory(name.getQualifiedName(), null);
    }
}
