/*
 * This file is generated by jOOQ.
 */
package sun.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sun.Fintrack;
import sun.Keys;
import sun.tables.records.AssetRecord;


/**
 * 자산 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Asset extends TableImpl<AssetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fintrack.ASSET</code>
     */
    public static final Asset ASSET = new Asset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssetRecord> getRecordType() {
        return AssetRecord.class;
    }

    /**
     * The column <code>fintrack.ASSET.AS_SEQ</code>. 자산 일련번호
     */
    public final TableField<AssetRecord, Long> AS_SEQ = createField(DSL.name("AS_SEQ"), SQLDataType.BIGINT.nullable(false).identity(true), this, "자산 일련번호");

    /**
     * The column <code>fintrack.ASSET.AS_NM</code>. 자산명
     */
    public final TableField<AssetRecord, String> AS_NM = createField(DSL.name("AS_NM"), SQLDataType.VARCHAR(30).nullable(false), this, "자산명");

    /**
     * The column <code>fintrack.ASSET.AS_AMT</code>. 자산 금액
     */
    public final TableField<AssetRecord, Long> AS_AMT = createField(DSL.name("AS_AMT"), SQLDataType.BIGINT.nullable(false), this, "자산 금액");

    /**
     * The column <code>fintrack.ASSET.MB_SEQ</code>. 회원 일련번호
     */
    public final TableField<AssetRecord, Long> MB_SEQ = createField(DSL.name("MB_SEQ"), SQLDataType.BIGINT.nullable(false), this, "회원 일련번호");

    /**
     * The column <code>fintrack.ASSET.CRE_DT</code>. 등록일시
     */
    public final TableField<AssetRecord, LocalDateTime> CRE_DT = createField(DSL.name("CRE_DT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "등록일시");

    /**
     * The column <code>fintrack.ASSET.UPD_DT</code>. 수정일시
     */
    public final TableField<AssetRecord, LocalDateTime> UPD_DT = createField(DSL.name("UPD_DT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "수정일시");

    private Asset(Name alias, Table<AssetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Asset(Name alias, Table<AssetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("자산 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>fintrack.ASSET</code> table reference
     */
    public Asset(String alias) {
        this(DSL.name(alias), ASSET);
    }

    /**
     * Create an aliased <code>fintrack.ASSET</code> table reference
     */
    public Asset(Name alias) {
        this(alias, ASSET);
    }

    /**
     * Create a <code>fintrack.ASSET</code> table reference
     */
    public Asset() {
        this(DSL.name("ASSET"), null);
    }

    public <O extends Record> Asset(Table<O> child, ForeignKey<O, AssetRecord> key) {
        super(child, key, ASSET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fintrack.FINTRACK;
    }

    @Override
    public Identity<AssetRecord, Long> getIdentity() {
        return (Identity<AssetRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AssetRecord> getPrimaryKey() {
        return Keys.KEY_ASSET_PRIMARY;
    }

    @Override
    public Asset as(String alias) {
        return new Asset(DSL.name(alias), this);
    }

    @Override
    public Asset as(Name alias) {
        return new Asset(alias, this);
    }

    @Override
    public Asset as(Table<?> alias) {
        return new Asset(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Asset rename(String name) {
        return new Asset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Asset rename(Name name) {
        return new Asset(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Asset rename(Table<?> name) {
        return new Asset(name.getQualifiedName(), null);
    }
}
