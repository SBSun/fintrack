/*
 * This file is generated by jOOQ.
 */
package sun.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sun.Fintrack;
import sun.Keys;
import sun.tables.records.TransferRecord;


/**
 * 이체 내역 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fintrack.TRANSFER</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>fintrack.TRANSFER.TRF_SEQ</code>. 이체 내역 일련번호
     */
    public final TableField<TransferRecord, Long> TRF_SEQ = createField(DSL.name("TRF_SEQ"), SQLDataType.BIGINT.nullable(false).identity(true), this, "이체 내역 일련번호");

    /**
     * The column <code>fintrack.TRANSFER.MB_SEQ</code>. 회원 일련번호
     */
    public final TableField<TransferRecord, Long> MB_SEQ = createField(DSL.name("MB_SEQ"), SQLDataType.BIGINT.nullable(false), this, "회원 일련번호");

    /**
     * The column <code>fintrack.TRANSFER.TRF_CTT</code>. 이체 내용
     */
    public final TableField<TransferRecord, String> TRF_CTT = createField(DSL.name("TRF_CTT"), SQLDataType.VARCHAR(255), this, "이체 내용");

    /**
     * The column <code>fintrack.TRANSFER.TRF_PRC</code>. 이체 금액
     */
    public final TableField<TransferRecord, Long> TRF_PRC = createField(DSL.name("TRF_PRC"), SQLDataType.BIGINT.nullable(false), this, "이체 금액");

    /**
     * The column <code>fintrack.TRANSFER.TRF_DT</code>. 이체일시
     */
    public final TableField<TransferRecord, LocalDateTime> TRF_DT = createField(DSL.name("TRF_DT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "이체일시");

    /**
     * The column <code>fintrack.TRANSFER.WTHDR_AS_SEQ</code>. 출금 자산 일련번호
     */
    public final TableField<TransferRecord, Long> WTHDR_AS_SEQ = createField(DSL.name("WTHDR_AS_SEQ"), SQLDataType.BIGINT.nullable(false), this, "출금 자산 일련번호");

    /**
     * The column <code>fintrack.TRANSFER.DPST_AS_SEQ</code>. 입금 자산 일련번호
     */
    public final TableField<TransferRecord, Long> DPST_AS_SEQ = createField(DSL.name("DPST_AS_SEQ"), SQLDataType.BIGINT.nullable(false), this, "입금 자산 일련번호");

    /**
     * The column <code>fintrack.TRANSFER.CRE_DT</code>. 등록일시
     */
    public final TableField<TransferRecord, LocalDateTime> CRE_DT = createField(DSL.name("CRE_DT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "등록일시");

    /**
     * The column <code>fintrack.TRANSFER.UPD_DT</code>. 수정일시
     */
    public final TableField<TransferRecord, LocalDateTime> UPD_DT = createField(DSL.name("UPD_DT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "수정일시");

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("이체 내역 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>fintrack.TRANSFER</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>fintrack.TRANSFER</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    /**
     * Create a <code>fintrack.TRANSFER</code> table reference
     */
    public Transfer() {
        this(DSL.name("TRANSFER"), null);
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fintrack.FINTRACK;
    }

    @Override
    public Identity<TransferRecord, Long> getIdentity() {
        return (Identity<TransferRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.KEY_TRANSFER_PRIMARY;
    }

    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    @Override
    public Transfer as(Table<?> alias) {
        return new Transfer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Table<?> name) {
        return new Transfer(name.getQualifiedName(), null);
    }
}
