/*
 * This file is generated by jOOQ.
 */
package sun.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sun.Fintrack;
import sun.Keys;
import sun.tables.records.CategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Category extends TableImpl<CategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>fintrack.CATEGORY</code>
     */
    public static final Category CATEGORY = new Category();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryRecord> getRecordType() {
        return CategoryRecord.class;
    }

    /**
     * The column <code>fintrack.CATEGORY.CTG_ID</code>. 카테고리 아이디
     */
    public final TableField<CategoryRecord, Long> CTG_ID = createField(DSL.name("CTG_ID"), SQLDataType.BIGINT.nullable(false), this, "카테고리 아이디");

    /**
     * The column <code>fintrack.CATEGORY.CTG_NM</code>. 카테고리명
     */
    public final TableField<CategoryRecord, String> CTG_NM = createField(DSL.name("CTG_NM"), SQLDataType.VARCHAR(50).nullable(false), this, "카테고리명");

    /**
     * The column <code>fintrack.CATEGORY.CTG_ORD</code>. 카테고리 순서
     */
    public final TableField<CategoryRecord, Integer> CTG_ORD = createField(DSL.name("CTG_ORD"), SQLDataType.INTEGER.nullable(false), this, "카테고리 순서");

    /**
     * The column <code>fintrack.CATEGORY.CTG_TYP</code>. 카테고리 타입
     */
    public final TableField<CategoryRecord, String> CTG_TYP = createField(DSL.name("CTG_TYP"), SQLDataType.CHAR(1).nullable(false), this, "카테고리 타입");

    /**
     * The column <code>fintrack.CATEGORY.MB_SEQ</code>. 회원 일련번호
     */
    public final TableField<CategoryRecord, Long> MB_SEQ = createField(DSL.name("MB_SEQ"), SQLDataType.BIGINT, this, "회원 일련번호");

    /**
     * The column <code>fintrack.CATEGORY.CRE_DT</code>. 등록일시
     */
    public final TableField<CategoryRecord, LocalDateTime> CRE_DT = createField(DSL.name("CRE_DT"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "등록일시");

    /**
     * The column <code>fintrack.CATEGORY.UPD_DT</code>. 수정일시
     */
    public final TableField<CategoryRecord, LocalDateTime> UPD_DT = createField(DSL.name("UPD_DT"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "수정일시");

    private Category(Name alias, Table<CategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Category(Name alias, Table<CategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>fintrack.CATEGORY</code> table reference
     */
    public Category(String alias) {
        this(DSL.name(alias), CATEGORY);
    }

    /**
     * Create an aliased <code>fintrack.CATEGORY</code> table reference
     */
    public Category(Name alias) {
        this(alias, CATEGORY);
    }

    /**
     * Create a <code>fintrack.CATEGORY</code> table reference
     */
    public Category() {
        this(DSL.name("CATEGORY"), null);
    }

    public <O extends Record> Category(Table<O> child, ForeignKey<O, CategoryRecord> key) {
        super(child, key, CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Fintrack.FINTRACK;
    }

    @Override
    public UniqueKey<CategoryRecord> getPrimaryKey() {
        return Keys.KEY_CATEGORY_PRIMARY;
    }

    @Override
    public Category as(String alias) {
        return new Category(DSL.name(alias), this);
    }

    @Override
    public Category as(Name alias) {
        return new Category(alias, this);
    }

    @Override
    public Category as(Table<?> alias) {
        return new Category(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Category rename(String name) {
        return new Category(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Category rename(Name name) {
        return new Category(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Category rename(Table<?> name) {
        return new Category(name.getQualifiedName(), null);
    }
}
