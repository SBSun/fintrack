plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.6'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'nu.studer.jooq' version '9.0'
}

group = 'com.sun'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

jar {
	enabled = false
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-webflux:3.2.4'
	implementation 'org.springframework.boot:spring-boot-configuration-processor:3.2.4'

	jooqGenerator 'com.mysql:mysql-connector-j'

	// Slack
	implementation 'com.slack.api:slack-api-client:1.39.3'

	// Jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// AWS
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// Utils
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
	implementation 'commons-io:commons-io:2.16.1'

	implementation 'com.opencsv:opencsv:5.5.2'

	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyConfig(type: Copy) {
	copy {
		from './fintrack-back-config'
		include "*.yml"
		into 'src/main/resources'
	}
}

jooq {
	version = dependencyManagement.importedProperties['jooq.version']
	edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

	configurations {
		main {  // name of the jOOQ configuration
			generateSchemaSourceOnCompilation = false  // default (can be omitted)

			generationTool {
				logging = org.jooq.meta.jaxb.Logging.DEBUG
				jdbc {
					driver = 'com.mysql.jdbc.Driver'
					url = 'jdbc:mysql://localhost:3306/fintrack'
					user = 'root'
					password = '1234'
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.mysql.MySQLDatabase'
						inputSchema = 'fintrack'
						forcedTypes {
							forcedType {
								name = 'varchar'
								includeExpression = '.*'
								includeTypes = 'JSONB?'
							}
							forcedType {
								name = 'varchar'
								includeExpression = '.*'
								includeTypes = 'INET'
							}
						}
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = true
						fluentSetters = true
					}
					target {
						packageName = 'sun'
						directory = 'src/main/java/com/sun/fintrack/common/domain/jooq'  // default (can be omitted)
					}
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				}
			}
		}
	}
}